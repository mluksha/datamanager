{
  "openapi": "3.0.1",
  "info": {
    "title": "Tabeeb.Web.Api",
    "version": "1.0"
  },
  "paths": {
    "/api/admin/adminusers": {
      "post": {
        "tags": [
          "AdminUsers"
        ],
        "summary": "Find all users in the system matching the supplied search query.",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token (Allowed roles: SystemAdmin, TenantAdmin, TenantBillingAdmin)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUsersSearchModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUsersSearchModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUsersSearchModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUsersSearchModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAdminViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAdminViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAdminViewModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1100</td><td>User not found.</td></tr><tr><td>1201</td><td>Role not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/adminusers/create": {
      "post": {
        "tags": [
          "AdminUsers"
        ],
        "summary": "Create new admin or user without password.",
        "description": "Sample response:\r\n            \r\n    {\r\n       \"UserId\": 123\r\n    }",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token (Allowed roles: SystemAdmin, TenantAdmin, TenantBillingAdmin)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "description": "User model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1000</td><td>An unspecified error occurred.</td></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1102</td><td>This account wasn't created. Please contact the system administrator.</td></tr><tr><td>1104</td><td>This user wasn't updated</td></tr><tr><td>1107</td><td>User email is not valid</td></tr><tr><td>1108</td><td>User doesn't have valid role.</td></tr><tr><td>1109</td><td>User or role was not provided</td></tr><tr><td>1111</td><td>Phone number is invalid.</td></tr><tr><td>1112</td><td>Phone number is already in use.</td></tr><tr><td>1113</td><td>Employee Id already exists in current tenant</td></tr><tr><td>1202</td><td>User with current role not allowed to set the role.</td></tr><tr><td>1301</td><td>Email with @collaborate.center domain part is not available</td></tr><tr><td>1302</td><td>User email already exists</td></tr><tr><td>1305</td><td>Invalid password</td></tr><tr><td>1552</td><td>Tenant not found</td></tr><tr><td>1553</td><td>Adding user to this tenant is not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns an object with the newly created user Id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserIdModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIdModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIdModel"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/chatMessage/bycontent/{contentId}": {
      "get": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Request is used to get all chat messages by content id",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "description": "Unique id of the session within the system",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique id of the session within the system",
              "format": "int32"
            }
          },
          {
            "name": "messagesSkip",
            "in": "query",
            "description": "Number of messages to skip",
            "schema": {
              "type": "integer",
              "description": "Number of messages to skip",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "messagesTake",
            "in": "query",
            "description": "Number of messages to take",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "description": "Number of messages to take",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessageModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessageModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessageModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/chatMessage/{id}": {
      "get": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Request is used to get chat message by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the message within the system",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique id of the message within the system",
              "format": "int32"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1900</td><td>Message not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/chatMessage": {
      "post": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Request is used to send new message in session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatMessageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatMessageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatMessageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatMessageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1902</td><td>Failed to create message.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1904</td><td>User has no permission to access chat in specified session.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/chatMessage/translate/languages": {
      "get": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Request is used to get a list of supported languages for translation",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/chatMessage/translate": {
      "post": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Request is used to translate message to selected language",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageTranslationModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageTranslationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageTranslationModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageTranslationModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1903</td><td>Language is not supported.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1900</td><td>Message not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/contentform/getcontentformsbycontentId/{contentId}": {
      "get": {
        "tags": [
          "ContentForm"
        ],
        "summary": "Request for retrieving the list of all forms attached to the session.",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "description": "The id of a session",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of a session",
              "format": "int32"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1101</td><td>Current user is not session participant.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of all forms attached to the session",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentFormsListWithoutStatusesModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentFormsListWithoutStatusesModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentFormsListWithoutStatusesModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/contentform/attachformtocontent": {
      "post": {
        "tags": [
          "ContentForm"
        ],
        "summary": "Request for attaching a particular form to the session.",
        "description": "Sample response:\r\n            \r\n    {\r\n       \"ContentFormId\": 123\r\n    }",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1101</td><td>Current user is not session participant.</td></tr><tr><td>1657</td><td>User has no permission to attach this form.</td></tr><tr><td>1658</td><td>User has no permission to attach forms to a session.</td></tr><tr><td>1659</td><td>User has no permission to attach forms to a session during video call.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr><tr><td>1650</td><td>Failed to attach form to a session.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns an object with the attached form ContentFormId",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContentFormIdModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentFormIdModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentFormIdModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1655</td><td>Form not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/contentform/attachFormsListToContent": {
      "post": {
        "tags": [
          "ContentForm"
        ],
        "summary": "Request for attaching multiple forms to the session.",
        "description": "Sample response (4 forms attached):\r\n            \r\n    {\r\n       \"ContentFormsIds\": [123, 456, 876, 345]\r\n    }",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormsModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormsModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFormsModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1101</td><td>Current user is not session participant.</td></tr><tr><td>1657</td><td>User has no permission to attach this form.</td></tr><tr><td>1658</td><td>User has no permission to attach forms to a session.</td></tr><tr><td>1659</td><td>User has no permission to attach forms to a session during video call.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr><tr><td>1650</td><td>Failed to attach form to a session.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list with attached forms ContentFormId",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContentFormsIdsModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentFormsIdsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentFormsIdsModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1655</td><td>Form not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/contents/createcontent": {
      "post": {
        "tags": [
          "Contents"
        ],
        "summary": "Request for creating a new session.\r\nSession is created with default drawing board page.\r\nBody description:\r\nDescription: string, optional. The name of the session. If null - then session will be created with current date as a name.\r\nContentNameParts: (array of objects, required for displaying session name in json format in reports)\r\nOrder: integer, required. The order of question.\r\nQuestion: string, required. The answered question.\r\nAnswer: string, required. The answer for the question.",
        "description": "Sample request with session naming convention:\r\n            \r\n    POST api/contents/createcontent\r\n    {\r\n       \"Description\": \"USA_Arizona_Phoenix_123\",\r\n       \"ContentNameParts\": \r\n        [\r\n            {\r\n                \"Order\": 0,\r\n                \"Question\": \"Country\",\r\n                \"Answer\": \"USA\"\r\n            },\r\n            {\r\n                \"Order\": 1,\r\n                \"Question\": \"State\",\r\n                \"Answer\": \"Arizona\"\r\n            },\r\n            {\r\n                \"Order\": 2,\r\n                \"Question\": \"City\",\r\n                \"Answer\": \"Phoenix\"\r\n            },\r\n            {\r\n                \"Order\": 3,\r\n                \"Question\": \"SomeId\",\r\n                \"Answer\": 123\r\n            }\r\n        ]\r\n    }\r\n    \r\nSample request without session naming convention:\r\n            \r\n    POST api/contents/createcontent\r\n    {\r\n       \"Description\": null (or any string value)\r\n    }\r\n    \r\nSample response:\r\n            \r\n    {\r\n       \"СontentId\": 123\r\n    }",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreateModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreateModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreateModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreateModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns an object with the newly created content Id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdModel"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/contents/switchOwner": {
      "post": {
        "tags": [
          "Contents"
        ],
        "summary": "Switch session Owner",
        "description": "Sample request:\r\n            \r\n    POST \r\n    {\r\n       \"ContentId\": 123,\r\n       \"NewOwnerId\": 321\r\n    }",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchOwnerModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchOwnerModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchOwnerModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchOwnerModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1110</td><td>This account is disabled. Please contact the system administrator.</td></tr><tr><td>1755</td><td>You cannot reassign session to the current session owner</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Session owner was successfully switсhed"
          },
          "403": {
            "description": "If user has no rights to switch owner<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1100</td><td>User not found.</td></tr><tr><td>1450</td><td>Content not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/contents/removeUser": {
      "post": {
        "tags": [
          "Contents"
        ],
        "summary": "Remove user from session",
        "description": "Sample request:\r\n            \r\n    POST \r\n    {\r\n       \"contentId\": 123,\r\n       \"userId\": 321\r\n    }",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserContentModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserContentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserContentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserContentModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1756</td><td>Session owner cannot be removed from the session</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "User was successfully removed from session"
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1100</td><td>User not found.</td></tr><tr><td>1450</td><td>Content not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/forms": {
      "get": {
        "tags": [
          "Forms"
        ],
        "summary": "Request returns a list of forms available for current user. \r\nForm is available if it's created by current user or if it's published by admin of current user tenant.",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of forms available for current user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FormViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormViewModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Forms"
        ],
        "summary": "Request creates a new form.",
        "description": "Sample request (simple form with 3 questions):\r\n\r\n    {\r\n        \"Name\": \"Metal form\",\r\n        \"Controls\": [\r\n                        {\r\n                            \"ControlType\": 1 (Text),\r\n                            \"Label\": \"Type the name of your favourite band\",\r\n                            \"Order\": 0\r\n                        },\r\n                        \r\n                        {\r\n                            \"ControlType\": 3 (Checkboxlist),\r\n                            \"Label\": \"Select the bands you prefer most\",\r\n                            \"Order\": 1,\r\n                            \"Options\": [\r\n                                            {\r\n                                                \"Value\": \"Metallica\",\r\n                                                \"Order\": 0\r\n                                            },\r\n                                            {\r\n                                                \"Value\": \"Manowar\",\r\n                                                \"Order\": 1\r\n                                            },\r\n                                            {\r\n                                                \"Value\": \"Tool\",\r\n                                                \"Order\": 2\r\n                                            },\r\n                                            {\r\n                                                \"Value\": \"Rammstein\",\r\n                                                \"Order\": 3\r\n                                            }\r\n                                       ]\r\n                        },\r\n                        \r\n                        {\r\n                            \"ControlType\": 4 (Radiobuttonlist),\r\n                            \"Label\": \"Have you ever attended your favourite band show?\",\r\n                            \"Order\": 2,\r\n                            \"Options\": [\r\n                                            {\r\n                                                \"Value\": \"Yes\",\r\n                                                \"Order\": 0\r\n                                            },\r\n                                            {\r\n                                                \"Value\": \"No\",\r\n                                                \"Order\": 1\r\n                                            }\r\n                                       ]\r\n                        }\r\n                    ]\r\n    }\r\n\r\nSample response:\r\n            \r\n    {\r\n       \"FormId\": 123\r\n    }",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormModel"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns an object with the Id of created form",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FormIdModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormIdModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormIdModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1651</td><td>Either counter or tabs can be added to the form.</td></tr><tr><td>1652</td><td>Control should contain at least one option.</td></tr><tr><td>1653</td><td>Textbox or textarea control condition should contain trigger value.</td></tr><tr><td>1654</td><td>Condition solution should be specified.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/drawingboard": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add drawing board to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDrawingBoardPageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDrawingBoardPageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDrawingBoardPageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDrawingBoardPageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/image": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add image to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImagePageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImagePageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImagePageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImagePageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/video": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add video to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVideoPageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVideoPageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVideoPageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVideoPageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/word": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add Word document to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWordPageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWordPageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWordPageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWordPageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/powerpoint": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add PowerPoint document to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePowerPointPageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePowerPointPageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePowerPointPageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePowerPointPageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/excel": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add Excel document to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExcelPageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExcelPageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExcelPageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExcelPageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/web": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add Web page to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebPageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebPageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebPageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebPageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/360view": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add 360 view page to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SpatialViewPageCreateModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpatialViewPageCreateModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SpatialViewPageCreateModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SpatialViewPageCreateModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1807</td><td>360 view was disabled by tenant.</td></tr><tr><td>1808</td><td>Page has invalid or unsupported content type.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/pdf": {
      "post": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to add pdf to session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePdfPageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePdfPageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePdfPageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePdfPageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/{id}": {
      "delete": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to delete page from session",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the page within the system",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique id of the page within the system",
              "format": "int32"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1804</td><td>User has no permission to modify page during video call.</td></tr><tr><td>1805</td><td>At least one page must be left in the main gallery.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1800</td><td>Page not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to get page from session",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the page within the system",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique id of the page within the system",
              "format": "int32"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1800</td><td>Page not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/rename": {
      "put": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to rename existing page",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RenamePageModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenamePageModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RenamePageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RenamePageModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1801</td><td>Failed to update page.</td></tr><tr><td>1804</td><td>User has no permission to modify page during video call.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1800</td><td>Page not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pages/moveto": {
      "put": {
        "tags": [
          "Pages"
        ],
        "summary": "Request is used to move existing pages to folder",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePagesFolderModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePagesFolderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePagesFolderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePagesFolderModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1801</td><td>Failed to update page.</td></tr><tr><td>1804</td><td>User has no permission to modify page during video call.</td></tr><tr><td>1805</td><td>At least one page must be left in the main gallery.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1750</td><td>Folder not found.</td></tr><tr><td>1800</td><td>Page not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/reports/answers/bycontent": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Request is used to receive a form answers report for specified session",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token (Allowed roles: SystemAdmin, TenantBillingAdmin, SessionAdmin, TenantAdmin)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionReportGetModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionReportGetModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionReportGetModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionReportGetModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormAnswerDataModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormAnswerDataModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormAnswerDataModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "403": {
            "description": "Forbidden <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/reports/answers": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Request is used to receive a form answers report for specified time period",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token (Allowed roles: SystemAdmin, TenantBillingAdmin, SessionAdmin, TenantAdmin)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1552</td><td>Tenant not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormAnswerDataModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormAnswerDataModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormAnswerDataModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "403": {
            "description": "Forbidden <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/reports/activity": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Request is used to receive a activity report for specified time period",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token (Allowed roles: SystemAdmin, TenantBillingAdmin, SessionAdmin, TenantAdmin)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1552</td><td>Tenant not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityDataModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityDataModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityDataModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "403": {
            "description": "Forbidden <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/reports/sessions": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Request is used to receive a session report for specified time period",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token (Allowed roles: SystemAdmin, TenantBillingAdmin, SessionAdmin, TenantAdmin)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetReportModel"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1552</td><td>Tenant not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllSessionsDataModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllSessionsDataModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllSessionsDataModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "403": {
            "description": "Forbidden <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sessionfolder/{id}": {
      "get": {
        "tags": [
          "SessionFolder"
        ],
        "summary": "Request is used to get session folder by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the session folder within the system",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique id of the session folder within the system",
              "format": "int32"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SessionFolderViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionFolderViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionFolderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SessionFolder"
        ],
        "summary": "Request is used to delete existing session folder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the session folder within the system",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique id of the session folder within the system",
              "format": "int32"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1754</td><td>User has no permission to modify folder during video call.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sessionfolder/bycontent/{contentId}": {
      "get": {
        "tags": [
          "SessionFolder"
        ],
        "summary": "Request is used to get all folders from session",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "description": "Unique id of the session within the system",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique id of the session within the system",
              "format": "int32"
            }
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionFolderViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionFolderViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionFolderViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sessionfolder": {
      "post": {
        "tags": [
          "SessionFolder"
        ],
        "summary": "Request is used to create new session folder",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionFolderModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionFolderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionFolderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionFolderModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SessionFolderViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionFolderViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionFolderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1752</td><td>Failed to create folder.</td></tr><tr><td>1753</td><td>User has no permission to create folder during video call.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sessionfolder/rename": {
      "put": {
        "tags": [
          "SessionFolder"
        ],
        "summary": "Request is used to rename existing session folder",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RenameSessionFolderModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameSessionFolderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameSessionFolderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RenameSessionFolderModel"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1452</td><td>Content not active.</td></tr><tr><td>1751</td><td>Failed to update folder.</td></tr><tr><td>1754</td><td>User has no permission to modify folder during video call.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1750</td><td>Folder not found.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>"
          },
          "415": {
            "description": "Unsupported Media Type <table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1008</td><td>Unsupported media type</td></tr></table>"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/token": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Request is used to receive an authorization token and login to the system.",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Password",
                  "Subdomain",
                  "UserName"
                ],
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "Password of the user who wants to authorize to the system"
                  },
                  "UserName": {
                    "type": "string",
                    "description": "Email of the user who wants to authorize to the system"
                  },
                  "Subdomain": {
                    "type": "string",
                    "description": "Subdomain of a tenant where the user wants to authorize to the system"
                  }
                }
              },
              "encoding": {
                "Password": {
                  "style": "form"
                },
                "UserName": {
                  "style": "form"
                },
                "Subdomain": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/JwtToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtToken"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtToken"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1108</td><td>User doesn't have valid role.</td></tr><tr><td>1110</td><td>This account is disabled. Please contact the system administrator.</td></tr><tr><td>1300</td><td>The user account email has not been confirmed.</td></tr><tr><td>1306</td><td>Invalid email or password.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1552</td><td>Tenant not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/token/nest": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Request is used to receive an authorization token and login to the system.",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "nest_token",
                  "session_id",
                  "Subdomain"
                ],
                "type": "object",
                "properties": {
                  "nest_token": {
                    "type": "string",
                    "description": "Token generated by nest system that will be exchanged for an access token to collaborate system"
                  },
                  "session_id": {
                    "type": "integer",
                    "description": "Сollaborate session to which access is gained from nest system",
                    "format": "int32"
                  },
                  "Subdomain": {
                    "type": "string",
                    "description": "Subdomain of a tenant where the user wants to authorize to the system"
                  }
                }
              },
              "encoding": {
                "nest_token": {
                  "style": "form"
                },
                "session_id": {
                  "style": "form"
                },
                "Subdomain": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NestJwtToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestJwtToken"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestJwtToken"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1102</td><td>This account wasn't created. Please contact the system administrator.</td></tr><tr><td>1103</td><td>This account wasn't added to content. Please contact the system administrator.</td></tr><tr><td>1200</td><td>This role wasn't created. Please contact the system administrator.</td></tr><tr><td>1400</td><td>Nest token not found.</td></tr><tr><td>1551</td><td>SessionId was not provided</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1450</td><td>Content not found</td></tr><tr><td>1552</td><td>Tenant not found</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads": {
      "post": {
        "tags": [
          "Uploads"
        ],
        "summary": "Request is used to upload file to storage",
        "description": "<br>Max file size: 2GB.\r\n<br>Request timeout: 10 minutes.",
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "File to upload",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr><tr><td>1950</td><td>File not uploaded.</td></tr><tr><td>1951</td><td>File not provided.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/admin/userroles/getroles": {
      "get": {
        "tags": [
          "UserRoles"
        ],
        "parameters": [
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "Subscription key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token (Allowed roles: SystemAdmin, TenantAdmin, TenantBillingAdmin)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer {access token}"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1001</td><td>Invalid request parameters.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1005</td><td>Unauthorized.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1002</td><td>Access not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1004</td><td>An unhandled error occurred.</td></tr><tr><td>1006</td><td>A timeout error occurred.</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed<br/><table border=\"1\"><caption>Error code and message returned in JSON</caption><tr><th>Code</th><th>Message</th></tr><tr><td>1007</td><td>Method not allowed</td></tr></table>",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Sorting": {
        "required": [
          "Column",
          "Order"
        ],
        "type": "object",
        "properties": {
          "Column": {
            "enum": [
              "1: Name",
              "2: Email",
              "3: Role",
              "4: Tenant",
              "5: IsDisabled",
              "6: IsCreatedByAdmin"
            ],
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "enum": [
              "1: asc",
              "2: desc"
            ],
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Filtering": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "Role": {
            "type": "string",
            "nullable": true
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminUsersSearchModel": {
        "required": [
          "Filtering",
          "Sorting"
        ],
        "type": "object",
        "properties": {
          "Sorting": {
            "$ref": "#/components/schemas/Sorting"
          },
          "Filtering": {
            "$ref": "#/components/schemas/Filtering"
          },
          "PageNumber": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "PageSize": {
            "type": "integer",
            "format": "int32",
            "default": 25
          }
        },
        "additionalProperties": false
      },
      "Error": {
        "required": [
          "Code",
          "Message"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "integer",
            "description": "An error code.",
            "format": "int32"
          },
          "Message": {
            "type": "string",
            "description": "The description of the error.",
            "readOnly": true
          },
          "Details": {
            "type": "string",
            "description": "Additional information about the error.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiErrorResponse": {
        "required": [
          "Error"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/Error"
          }
        },
        "additionalProperties": false
      },
      "UserAdminViewModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "AvatarUrl": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "EmployeeId": {
            "type": "string",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "Role": {
            "type": "string",
            "nullable": true
          },
          "TenantId": {
            "type": "integer",
            "format": "int32"
          },
          "TenantName": {
            "type": "string",
            "nullable": true
          },
          "IsCreatedByAdmin": {
            "type": "boolean"
          },
          "HasPassword": {
            "type": "boolean"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "Line1": {
            "maxLength": 512,
            "type": "string",
            "nullable": true
          },
          "Line2": {
            "maxLength": 512,
            "type": "string",
            "nullable": true
          },
          "City": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "State": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "PostalCode": {
            "maxLength": 16,
            "type": "string",
            "nullable": true
          },
          "Country": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateUserModel": {
        "required": [
          "Email",
          "FirstName",
          "LastName",
          "Role"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "maxLength": 35,
            "type": "string"
          },
          "LastName": {
            "maxLength": 35,
            "type": "string"
          },
          "EmployeeId": {
            "maxLength": 128,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string",
            "nullable": true
          },
          "Email": {
            "maxLength": 120,
            "type": "string"
          },
          "Password": {
            "maxLength": 128,
            "type": "string",
            "nullable": true
          },
          "Role": {
            "type": "string"
          },
          "Institution": {
            "type": "string",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PhoneNumber": {
            "maxLength": 15,
            "type": "string",
            "nullable": true
          },
          "Address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "TenantId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserIdModel": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BaseUserInfoModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "AvatarUrl": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChatMessageModel": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "User": {
            "$ref": "#/components/schemas/BaseUserInfoModel"
          },
          "ContentId": {
            "type": "integer",
            "format": "int32"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Translations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "CreatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateChatMessageModel": {
        "required": [
          "ContentId",
          "Message"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Message": {
            "maxLength": 4000,
            "type": "string",
            "description": "Text of message"
          }
        },
        "additionalProperties": false
      },
      "ChatMessageTranslationModel": {
        "required": [
          "MessageId",
          "TargetLanguage"
        ],
        "type": "object",
        "properties": {
          "MessageId": {
            "type": "integer",
            "description": "Unique id of chat message within the system",
            "format": "int32"
          },
          "TargetLanguage": {
            "type": "string",
            "description": "Short language name"
          }
        },
        "additionalProperties": false
      },
      "ContentFormsListWithoutStatusesModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ContentId": {
            "type": "integer",
            "format": "int32"
          },
          "FormId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ReattachedNumberOfTimes": {
            "type": "integer",
            "format": "int32"
          },
          "HasCountersWithConditions": {
            "type": "boolean"
          },
          "HasCounters": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AttachFormModel": {
        "required": [
          "ContentId",
          "FormId"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "The id of a session.",
            "format": "int32"
          },
          "FormId": {
            "type": "integer",
            "description": "The id of attached form.",
            "format": "int32"
          },
          "IsAttachedFromCondition": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContentFormIdModel": {
        "type": "object",
        "properties": {
          "ContentFormId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AttachFormsModel": {
        "required": [
          "ContentId",
          "FormsId"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "The id of a session.",
            "format": "int32"
          },
          "FormsId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of Ids of attached forms."
          }
        },
        "additionalProperties": false
      },
      "ContentFormsIdsModel": {
        "type": "object",
        "properties": {
          "ContentFormsIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PageCreateModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "Type": {
            "enum": [
              "0: Standard",
              "1: Text",
              "2: EncodingPending"
            ],
            "type": "integer",
            "format": "int32"
          },
          "ContentType": {
            "enum": [
              "0: Unknown",
              "1: Video",
              "2: Text",
              "3: Pdf",
              "4: VideoByUrl",
              "5: CloudFile",
              "6: RecordedVideo",
              "7: Audio",
              "8: DrawingBoard",
              "9: Snapshot",
              "10: Image",
              "11: ConcatenatedVideo",
              "12: WebPage",
              "13: SpatialModel",
              "14: DocDocumentPage",
              "15: PptDocumentPage",
              "16: ExcelDocumentPage",
              "101: UnencodedVideo",
              "102: UnencodedRecordedVideo",
              "103: UnencodedConcatenatedVideo",
              "104: RecordedCloudFileVideo",
              "105: StreamVideo"
            ],
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentCreateModel": {
        "type": "object",
        "properties": {
          "Pages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageCreateModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentNamePartModel": {
        "required": [
          "Answer",
          "Order",
          "Question"
        ],
        "type": "object",
        "properties": {
          "Question": {
            "type": "string"
          },
          "Answer": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ContentCreateModel": {
        "type": "object",
        "properties": {
          "Description": {
            "maxLength": 4000,
            "type": "string",
            "description": "The name of created session.",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the session folder.",
            "format": "int32",
            "nullable": true
          },
          "Documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentCreateModel"
            },
            "nullable": true
          },
          "ProgramId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContentNameParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentNamePartModel"
            },
            "description": "Array of objects, required for displaying session name in json format in reports (if session name created using naming convention).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentIdModel": {
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SwitchOwnerModel": {
        "required": [
          "ContentId",
          "NewOwnerId"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "The id of particular session.",
            "format": "int32"
          },
          "NewOwnerId": {
            "type": "integer",
            "description": "The id of user, for whom session is switched.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RemoveUserContentModel": {
        "required": [
          "ContentId",
          "UserId"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "The id of particular session.",
            "format": "int32"
          },
          "UserId": {
            "type": "integer",
            "description": "The id of the user to be removed from the session.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FormViewUserModel": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "description": "A form creator user email.",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "A form creator user first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "A form creator user last name.",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FormViewModel": {
        "type": "object",
        "properties": {
          "FormId": {
            "type": "integer",
            "description": "A form id.",
            "format": "int32"
          },
          "UserId": {
            "type": "integer",
            "description": "A form creator user id.",
            "format": "int32"
          },
          "User": {
            "$ref": "#/components/schemas/FormViewUserModel"
          },
          "Name": {
            "type": "string",
            "description": "A form name.",
            "nullable": true
          },
          "CreatedOn": {
            "type": "string",
            "description": "A form creation date.",
            "format": "date-time",
            "nullable": true
          },
          "IconUrl": {
            "type": "string",
            "description": "A form thumbnail.",
            "nullable": true
          },
          "ControlsNumber": {
            "type": "integer",
            "description": "A number of form questions.",
            "format": "int32"
          },
          "SessionsNumber": {
            "type": "integer",
            "description": "A number of sessions where current form is attached.",
            "format": "int32"
          },
          "AnswersNumber": {
            "type": "integer",
            "description": "A total number of answers given in current form in all sessions.",
            "format": "int32"
          },
          "IsPublished": {
            "type": "boolean",
            "description": "Indicates that form is not created by current user, but published by tenant admin.\r\nPublished forms are available for every user of this tenant."
          }
        },
        "additionalProperties": false
      },
      "FormTabModel": {
        "required": [
          "Order",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Value": {
            "maxLength": 128,
            "type": "string",
            "description": "A name of the tab."
          },
          "Order": {
            "type": "integer",
            "description": "An order of the tab in current tab panel.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FormTabPanelModel": {
        "required": [
          "Order",
          "Tabs"
        ],
        "type": "object",
        "properties": {
          "Order": {
            "type": "integer",
            "description": "An order of the tab panel in the form.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "A tab panel name.",
            "nullable": true
          },
          "Tabs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormTabModel"
            },
            "description": "A list of tabs in current panel."
          }
        },
        "additionalProperties": false
      },
      "FormConditionModel": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "0: Unknown",
              "1: AttachForm",
              "2: SendEmail",
              "3: AddVideoByUrl",
              "4: ShowInfoMessage"
            ],
            "type": "integer",
            "description": "A condition type.",
            "format": "int32"
          },
          "Solution": {
            "maxLength": 4000,
            "type": "string",
            "description": "A main information used by triggered condition action. \r\nFor AttachForm condition - FormId, SendEmail - additional text in email, AddVideoByUrl - Video Url, ShowInfoMessage - info message. \r\nOptional for SendEmail condition.",
            "nullable": true
          },
          "TriggerValue": {
            "maxLength": 128,
            "type": "string",
            "description": "An answer value that trigger condition action (For textbox and textarea).",
            "nullable": true
          },
          "TriggerType": {
            "enum": [
              "0: None",
              "1: Equals",
              "2: GreaterThan",
              "3: LessThan"
            ],
            "type": "integer",
            "description": "Trigger mode for numeric answer value.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FormControlOptionModel": {
        "required": [
          "Order",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Value": {
            "maxLength": 128,
            "type": "string",
            "description": "A name of the option."
          },
          "Order": {
            "type": "integer",
            "description": "An order of the option in current control.",
            "format": "int32"
          },
          "Conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormConditionModel"
            },
            "description": "A list of actions that can be triggered by selecting current option (for Dropdown, Checkbox or Radiobutton control).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormControlInfoContentModel": {
        "required": [
          "Type",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "0: Unknown",
              "1: Video",
              "2: Text",
              "3: Pdf",
              "4: VideoByUrl",
              "5: CloudFile",
              "6: RecordedVideo",
              "7: Audio",
              "8: DrawingBoard",
              "9: Snapshot",
              "10: Image",
              "11: ConcatenatedVideo",
              "12: WebPage",
              "13: SpatialModel",
              "14: DocDocumentPage",
              "15: PptDocumentPage",
              "16: ExcelDocumentPage",
              "101: UnencodedVideo",
              "102: UnencodedRecordedVideo",
              "103: UnencodedConcatenatedVideo",
              "104: RecordedCloudFileVideo",
              "105: StreamVideo"
            ],
            "type": "integer",
            "description": "An additional information content type (image, video).",
            "format": "int32"
          },
          "Url": {
            "maxLength": 4000,
            "type": "string",
            "description": "An additional information content url."
          },
          "FileName": {
            "maxLength": 256,
            "type": "string",
            "description": "An additional information content file name.",
            "nullable": true
          },
          "ThumbnailUrl": {
            "maxLength": 4000,
            "type": "string",
            "description": "An additional information content thumnail url (For video files only).",
            "nullable": true
          },
          "EncodedUrl": {
            "maxLength": 4000,
            "type": "string",
            "description": "An additional information content encoded url (For video files only).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormControlInfoModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "ControlLabel": {
            "maxLength": 4000,
            "type": "string",
            "description": "A question text.",
            "nullable": true
          },
          "Content": {
            "$ref": "#/components/schemas/FormControlInfoContentModel"
          }
        },
        "additionalProperties": false
      },
      "FormControlModel": {
        "required": [
          "ControlType",
          "Label",
          "Order"
        ],
        "type": "object",
        "properties": {
          "ControlType": {
            "enum": [
              "1: Text",
              "2: Textarea",
              "3: Checkboxlist",
              "4: Radiobuttonlist",
              "5: Selectlist",
              "6: Tabs",
              "7: Counter",
              "8: Date",
              "9: DateTime"
            ],
            "type": "integer",
            "description": "A type of control.",
            "format": "int32"
          },
          "Tooltip": {
            "maxLength": 512,
            "type": "string",
            "description": "An informational text displayed when hovering over the control.",
            "nullable": true
          },
          "Placeholder": {
            "maxLength": 256,
            "type": "string",
            "description": "A hint text for possible content in control field.",
            "nullable": true
          },
          "InitialValue": {
            "maxLength": 512,
            "type": "string",
            "description": "A default answer for current question (For textbox and textarea only).",
            "nullable": true
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormControlOptionModel"
            },
            "description": "A list of control options (For dropdown, checkbox and radiobutton).",
            "nullable": true
          },
          "Info": {
            "$ref": "#/components/schemas/FormControlInfoModel"
          },
          "Type": {
            "enum": [
              "0: Basic",
              "1: BodyTemperature"
            ],
            "type": "integer",
            "description": "Specific question type. By default - Basic",
            "format": "int32"
          },
          "Label": {
            "maxLength": 4000,
            "type": "string",
            "description": "A question text."
          },
          "Order": {
            "type": "integer",
            "description": "An order of the current question in the form.",
            "format": "int32"
          },
          "IncrementValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IncrementPeriod": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormConditionModel"
            },
            "description": "A list of actions that can be triggered by answering current question (for Textbox or Textarea control).",
            "nullable": true
          },
          "ExternalData": {
            "maxLength": 4000,
            "type": "string",
            "description": "An external information related to current control (Id or any other information).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormCounterModel": {
        "required": [
          "AIObjectId",
          "Label",
          "Order"
        ],
        "type": "object",
        "properties": {
          "CounterLimit": {
            "type": "integer",
            "description": "A counter limit. Can be used to trigger counter conditions when exceeded. If null - unlimited.",
            "format": "int32",
            "nullable": true
          },
          "AIObjectId": {
            "type": "integer",
            "description": "AI class Id.",
            "format": "int32"
          },
          "CountAIObjects": {
            "type": "boolean",
            "description": "Indicates whether the counter should count AI class unique objects or not."
          },
          "Label": {
            "maxLength": 256,
            "type": "string",
            "description": "A counter name."
          },
          "Order": {
            "type": "integer",
            "description": "An order of the current counter in the form.",
            "format": "int32"
          },
          "IncrementValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IncrementPeriod": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormConditionModel"
            },
            "description": "A list of actions that can be triggered by exceeding counter limit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormActionModel": {
        "required": [
          "ApiUrl",
          "Label",
          "Order"
        ],
        "type": "object",
        "properties": {
          "ApiUrl": {
            "maxLength": 4000,
            "type": "string",
            "description": "An API Url."
          },
          "ApiKey": {
            "maxLength": 100,
            "type": "string",
            "description": "An API key (optional).",
            "nullable": true
          },
          "Label": {
            "maxLength": 256,
            "type": "string",
            "description": "An action name."
          },
          "Order": {
            "type": "integer",
            "description": "An order of the current action in the form.",
            "format": "int32"
          },
          "Tooltip": {
            "maxLength": 512,
            "type": "string",
            "description": "An informational text displayed when hovering over the action.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateFormModel": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "A form name."
          },
          "IconUrl": {
            "maxLength": 4000,
            "type": "string",
            "description": "A form thumbnail.",
            "nullable": true
          },
          "Tabspanels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormTabPanelModel"
            },
            "description": "A list of tabs panels. Each tab panel contains at least one tab.",
            "nullable": true
          },
          "Controls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormControlModel"
            },
            "description": "A list of form questions. Required if Counters list is empty.",
            "nullable": true
          },
          "Counters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormCounterModel"
            },
            "description": "A list of AI counters. Required if Controls list is empty.",
            "nullable": true
          },
          "Actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormActionModel"
            },
            "description": "A list of form actions. Required if Controls list is empty.",
            "nullable": true
          },
          "FormViewMode": {
            "enum": [
              "0: Default",
              "1: List"
            ],
            "type": "integer",
            "description": "A view mode for mobile users.",
            "format": "int32"
          },
          "ExternalData": {
            "maxLength": 4000,
            "type": "string",
            "description": "An external information related to current form (Id or any other information).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormIdModel": {
        "type": "object",
        "properties": {
          "FormId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateDrawingBoardPageModel": {
        "required": [
          "ContentId"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CompressedMediaUrlModel": {
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "format": "int32"
          },
          "CompressionType": {
            "enum": [
              "0: Unscaled",
              "1: Scaled"
            ],
            "type": "integer",
            "format": "int32"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MetadataModel": {
        "type": "object",
        "properties": {
          "FieldOfView": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Altitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssetModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "Type": {
            "enum": [
              "0: Unknown",
              "1: Image",
              "2: Video",
              "3: Preview",
              "4: Audio",
              "5: CloudFile",
              "6: RecordedVideo",
              "7: Thumbnail",
              "10: Snapshot",
              "12: WebPage",
              "13: SpatialModelImage",
              "14: DocDocument",
              "15: PptDocument",
              "16: ExcelDocument",
              "11: ConcatenatedVideo",
              "101: UnencodedVideo",
              "102: UnencodedRecordedVideo",
              "103: UnencodedConcatenatedVideo",
              "104: RecordedCloudFileVideo",
              "105: StreamVideo"
            ],
            "type": "integer",
            "format": "int32"
          },
          "Url": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "CompressedMediaUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompressedMediaUrlModel"
            },
            "nullable": true
          },
          "Metadata": {
            "$ref": "#/components/schemas/MetadataModel"
          },
          "PageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "Duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OriginalCreatedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "LinkedPageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CopyOfId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MeasurementStatus": {
            "enum": [
              "0: NotCreated",
              "1: ModelCreating",
              "2: ModelCreated",
              "3: ConversionsCreating",
              "4: ConversionsCreated"
            ],
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserInfoModel": {
        "type": "object",
        "properties": {
          "DeviceType": {
            "enum": [
              "0: Unknown",
              "1: WebBrowser",
              "2: AndroidDevice",
              "3: AppleDevice"
            ],
            "type": "integer",
            "format": "int32"
          },
          "IsGuest": {
            "type": "boolean"
          },
          "IsOwner": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "Role": {
            "enum": [
              "0: User",
              "1: Owner",
              "2: AIUser",
              "3: Reviewer",
              "4: Viewer"
            ],
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "AvatarUrl": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Point": {
        "type": "object",
        "properties": {
          "X": {
            "type": "number",
            "format": "double"
          },
          "Y": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Coordinates": {
        "type": "object",
        "properties": {
          "Start": {
            "$ref": "#/components/schemas/Point"
          },
          "End": {
            "$ref": "#/components/schemas/Point"
          }
        },
        "additionalProperties": false
      },
      "AnnotationModel": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "User": {
            "$ref": "#/components/schemas/UserInfoModel"
          },
          "PageId": {
            "type": "integer",
            "format": "int32"
          },
          "ContentId": {
            "type": "integer",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "0: StrokeDraw",
              "1: StrokeErase",
              "2: Laser",
              "3: Text",
              "4: Audio",
              "5: Text_Callout",
              "6: HotSpot",
              "7: LinkedPage",
              "8: AI",
              "9: AIHotspot",
              "100: StrokeDraw_Shape_Line",
              "101: StrokeDraw_Shape_Rectangle",
              "102: StrokeDraw_Shape_Ellipse",
              "103: StrokeDraw_Shape_Rectangle_Filled",
              "104: StrokeDraw_Shape_Ellipse_Filled",
              "105: StrokeDraw_Shape_Line_ArrowEnd",
              "106: StrokeDraw_Shape_Line_ArrowBoth"
            ],
            "type": "integer",
            "format": "int32"
          },
          "CreatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "Color": {
            "type": "string",
            "nullable": true
          },
          "Width": {
            "type": "integer",
            "format": "int32"
          },
          "Coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinates"
            },
            "nullable": true
          },
          "FontSize": {
            "type": "integer",
            "format": "int32"
          },
          "TopLeft": {
            "$ref": "#/components/schemas/Point"
          },
          "Anchor": {
            "$ref": "#/components/schemas/Point"
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "Timestamp": {
            "type": "number",
            "format": "float"
          },
          "TargetTimestamp": {
            "type": "number",
            "format": "float"
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "ParentAnnotationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LinkedPageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Duration": {
            "type": "number",
            "format": "float"
          },
          "Size": {
            "type": "integer",
            "format": "int64"
          },
          "FormId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FormControlId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FormAnswerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FormAnswererId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FormTabIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "IsAIDetectCorrect": {
            "type": "boolean",
            "nullable": true
          },
          "UserFeedback": {
            "type": "string",
            "nullable": true
          },
          "UniqueAIObjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AIObjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PageTagModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PageModel": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "Type": {
            "enum": [
              "0: Standard",
              "1: Text",
              "2: EncodingPending"
            ],
            "type": "integer",
            "format": "int32"
          },
          "ContentType": {
            "enum": [
              "0: Unknown",
              "1: Video",
              "2: Text",
              "3: Pdf",
              "4: VideoByUrl",
              "5: CloudFile",
              "6: RecordedVideo",
              "7: Audio",
              "8: DrawingBoard",
              "9: Snapshot",
              "10: Image",
              "11: ConcatenatedVideo",
              "12: WebPage",
              "13: SpatialModel",
              "14: DocDocumentPage",
              "15: PptDocumentPage",
              "16: ExcelDocumentPage",
              "101: UnencodedVideo",
              "102: UnencodedRecordedVideo",
              "103: UnencodedConcatenatedVideo",
              "104: RecordedCloudFileVideo",
              "105: StreamVideo"
            ],
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetModel"
            },
            "nullable": true
          },
          "Annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnnotationModel"
            },
            "nullable": true
          },
          "Owner": {
            "$ref": "#/components/schemas/BaseUserInfoModel"
          },
          "DocumentId": {
            "type": "integer",
            "format": "int32"
          },
          "ContentId": {
            "type": "integer",
            "format": "int32"
          },
          "Content": {
            "type": "string",
            "nullable": true
          },
          "CreatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          },
          "DateTimeOffset": {
            "type": "integer",
            "format": "int64"
          },
          "PdfURL": {
            "type": "string",
            "nullable": true
          },
          "PdfPageIndex": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IsRecorded": {
            "type": "boolean"
          },
          "ThumbnailUrl": {
            "type": "string",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CopyOfId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageTagModel"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateImagePageModel": {
        "required": [
          "ContentId",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url to file\r\n<br>Only links to collaborate blob storage are supported (can be received via api/uploads)"
          },
          "Latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateVideoPageModel": {
        "required": [
          "ContentId",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url to file\r\n<br>Only links to collaborate blob storage are supported (can be received via api/uploads)"
          },
          "Latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateWordPageModel": {
        "required": [
          "ContentId",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url to document\r\n<br>Only links to collaborate blob storage are supported (can be received via api/uploads)"
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreatePowerPointPageModel": {
        "required": [
          "ContentId",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url to document\r\n<br>Only links to collaborate blob storage are supported (can be received via api/uploads)"
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateExcelPageModel": {
        "required": [
          "ContentId",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url to document\r\n<br>Only links to collaborate blob storage are supported (can be received via api/uploads)"
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateWebPageModel": {
        "required": [
          "ContentId",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url to web page",
            "format": "uri"
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SpatialViewPageCreateModel": {
        "required": [
          "ContentId",
          "PageIds"
        ],
        "type": "object",
        "properties": {
          "PageIds": {
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of pages ids, from which 360 view will be created"
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreatePdfPageModel": {
        "required": [
          "ContentId",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url to pdf\r\n<br>Only links to collaborate blob storage are supported (can be received via api/uploads)"
          },
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of page",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RenamePageModel": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique if of the page within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "New name of the page"
          }
        },
        "additionalProperties": false
      },
      "UpdatePagesFolderModel": {
        "required": [
          "PageIds"
        ],
        "type": "object",
        "properties": {
          "PageIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of unique pages ids"
          },
          "FolderId": {
            "type": "integer",
            "description": "Id of the folder to which the pages are moved",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Start date",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "End date",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Time period for which the report is generated\r\n<br>If missing, then data for all time is returned."
      },
      "SessionReportGetModel": {
        "required": [
          "ContentId"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Latest": {
            "type": "boolean",
            "description": "Parameter for defining whether only the latest answers or the whole history of answers will be returned",
            "default": true
          },
          "ExportPeriod": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        },
        "additionalProperties": false
      },
      "FormAnswerValueModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique id of form answer within the system",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Answer value",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormAnswerCommentModel": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email of user",
            "nullable": true
          },
          "Reply": {
            "type": "string",
            "description": "Text of reply",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FormAnswerDataModel": {
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "SessionOwner": {
            "type": "string",
            "description": "Email of the user who created a session or was switched to be an owner by an Admin",
            "nullable": true
          },
          "SessionTitle": {
            "type": "string",
            "description": "Name of the session assigned by the system automatically or changed by the user manually",
            "nullable": true
          },
          "FormId": {
            "type": "integer",
            "description": "Unique id of the form within the system",
            "format": "int32"
          },
          "FormName": {
            "type": "string",
            "description": "Name of the form assigned by the system automatically or changed by the user manually",
            "nullable": true
          },
          "FormQuestionId": {
            "type": "integer",
            "description": "Unique id of the question within the system",
            "format": "int32"
          },
          "FormQuestion": {
            "type": "string",
            "description": "Text of the question in a form",
            "nullable": true
          },
          "FormTabs": {
            "type": "string",
            "description": "Name of section combinations inside a form in which form answer was given (e.g. Form has 5 questions and 2 tabs named \"Now\" and \"In the Past\". I.e. 5 questions can be answered for tab \"Now\" and same 5 for tab \"In the past\" (totally = 10 unique form answers)",
            "nullable": true
          },
          "FormAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormAnswerValueModel"
            },
            "description": "Text of the answer to particular form question",
            "nullable": true
          },
          "Replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormAnswerCommentModel"
            },
            "description": "Text of additional comments left for a form answer",
            "nullable": true
          },
          "AnsweringUserEmail": {
            "type": "string",
            "description": "Email of the user who gave a particular answer to a particular form question",
            "nullable": true
          },
          "FormAnswerTime": {
            "type": "string",
            "description": "Exact day and time (in UTC) when a particular answer to a particular form question was given",
            "format": "date-time",
            "nullable": true
          },
          "FormAnswerStatusTime": {
            "type": "string",
            "description": "Exact day and time (in UTC) when the status of a particular answer to a particular form question was changed",
            "format": "date-time",
            "nullable": true
          },
          "FormAnswerStatusApprover": {
            "type": "string",
            "description": "Email of the user who changed the status of a particular answer to a particular form question",
            "nullable": true
          },
          "FormAnswerStatus": {
            "enum": [
              "0: Submitted",
              "1: Approved",
              "2: Rejected",
              "3: Empty",
              "4: Approved by AI",
              "5: Rejected by AI",
              "6: Approved by Reviewer",
              "7: Rejected by Reviewer"
            ],
            "type": "integer",
            "description": "Current status of a particular form answer",
            "format": "int32"
          },
          "PageUrl": {
            "type": "string",
            "description": "URL to the page on which a particular answer to a particular form question was given",
            "nullable": true
          },
          "PageSize": {
            "type": "number",
            "description": "Size of the page on which a particular answer to a particular form question was given (in megabytes)",
            "format": "float"
          },
          "Latitude": {
            "type": "number",
            "description": "GPS latitude of the page on which a particular answer to a particular form question was given (if GPS data is present in a page)",
            "format": "double",
            "nullable": true
          },
          "Longitude": {
            "type": "number",
            "description": "GPS longitude of the page on which a particular answer to a particular form question was given (if GPS data is present in a page)",
            "format": "double",
            "nullable": true
          },
          "ExternalData": {
            "maxLength": 256,
            "type": "string",
            "description": "External data",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReportTimePeriod": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Start date\r\n<br>Default value: 15 minutes before the current time.",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "End date\r\n<br>Default value: current time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Time period for which the report is generated\r\n<br>If missing, then data for the latest 15 minutes is returned."
      },
      "GetReportModel": {
        "type": "object",
        "properties": {
          "TenantId": {
            "type": "integer",
            "description": "Id of the tenant for which report is generated\r\n<br>If missing, then data for users tenant is returned.",
            "format": "int32",
            "nullable": true
          },
          "ExportPeriod": {
            "$ref": "#/components/schemas/GetReportTimePeriod"
          }
        },
        "additionalProperties": false
      },
      "ActivityDataModel": {
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "SessionTitle": {
            "type": "string",
            "description": "Name of the session assigned by the system automatically or changed by the user manually",
            "nullable": true
          },
          "ActionUser": {
            "type": "string",
            "description": "Email of the user who performs an action",
            "nullable": true
          },
          "ActionType": {
            "enum": [
              "0: VideoExported",
              "1: StartCall",
              "2: SessionCreated",
              "3: EnterSession",
              "4: AddAnnotation",
              "5: SessionDeleted",
              "6: SessionOwnerChanged",
              "7: ImageUploaded",
              "8: VideoUploaded",
              "9: FormStatusUpdated",
              "10: EndOfCall",
              "11: ExportPdf",
              "12: ExportImages",
              "13: InvitationSent",
              "14: InvitationAccepted",
              "15: SessionPublished",
              "16: SessionUnpublished",
              "17: SessionShared",
              "18: SessionRevoked",
              "19: SessionCopied",
              "20: FormStatusUpdatedByAI",
              "21: SessionSentForReview",
              "22: SessionReadyForReview",
              "23: SessionFeedbackSent",
              "24: SessionReviewCompleted",
              "25: CheckIn",
              "26: CheckOut",
              "27: Confirm"
            ],
            "type": "integer",
            "description": "Specific action which is performed by the user",
            "format": "int32"
          },
          "ActionTime": {
            "type": "string",
            "description": "Exact day and time (in UTC) when action was performed",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionNamingConventionAnswerModel": {
        "type": "object",
        "properties": {
          "Question": {
            "type": "string",
            "nullable": true
          },
          "Answer": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AllSessionsDataModel": {
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "Name of the session assigned by the system automatically or changed by the user manually",
            "nullable": true
          },
          "Owner": {
            "type": "string",
            "description": "Email of the user who created a session or was switched to be an owner by an Admin",
            "nullable": true
          },
          "CreatedOn": {
            "type": "string",
            "description": "Exact day and time (in UTC) when a particular session was created",
            "nullable": true
          },
          "LastActivity": {
            "type": "string",
            "description": "Exact day and time (in UTC) when last time an image or video was uploaded to the session by web/mobile session participants or form answer status was updated by web session owner or video call was started by web/mobile session owner",
            "nullable": true
          },
          "Length": {
            "type": "string",
            "description": "The difference between \"LastActivity\" and \"CreatedOn\" in \"dd:hh:mm\" format",
            "nullable": true
          },
          "DaysActive": {
            "type": "integer",
            "description": "Number of unique image or video upload days (e.g. session of 5 days length, 1st day - 5 images and/or photos uploaded, 2nd - none, 3rd day - 1 image and/or photo uploaded, 4th, 5th days - none. \"Days Active\" = 2)",
            "format": "int32"
          },
          "Pages": {
            "type": "integer",
            "description": "Total amount of all pages of all types in the session",
            "format": "int32"
          },
          "Videos": {
            "type": "integer",
            "description": "Amount of videos (URL videos, recorded videos, custom videos included) uploaded to the session by web/mobile session participants",
            "format": "int32"
          },
          "Images": {
            "type": "integer",
            "description": "Amount of images (snapshots included) uploaded to the session by web/mobile session participants",
            "format": "int32"
          },
          "ApprovedPercent": {
            "type": "number",
            "description": "Percentage of approved statuses among the latest form answer statuses from all forms currently attached to the session (100 x \"Approved\" / Total)",
            "format": "double"
          },
          "RejectedPercent": {
            "type": "number",
            "description": "Percentage of rejected statuses among the latest form answer statuses from all forms currently attached to the session (100 x \"Rejected\" / Total)",
            "format": "double"
          },
          "PendingPercent": {
            "type": "number",
            "description": "Percentage of pending statuses among the latest form answer statuses from all forms currently attached to the session (100 x \"Submitted\" / Total)",
            "format": "double"
          },
          "CompletedPercent": {
            "type": "number",
            "description": "The sum of \"ApprovedPercent\", \"RejectedPercent\", \"PendingPercent\"",
            "format": "double"
          },
          "Total": {
            "type": "integer",
            "description": "Total amount of form questions within all forms which are currently attached to the session (tab combinations included, i.e. question is multiplied by the amount of tab combinations if the latter are present, e.g. 3 questions in a form with 2 tabs will have 6 questions in total)",
            "format": "int32",
            "nullable": true
          },
          "Approved": {
            "type": "integer",
            "description": "Amount of \"Approved\" statuses among the latest form answer statuses from all forms currently attached to the session",
            "format": "int32"
          },
          "Rejected": {
            "type": "integer",
            "description": "Amount of \"Rejected\" statuses among the latest form answer statuses from all forms currently attached to the session",
            "format": "int32"
          },
          "Pending": {
            "type": "integer",
            "description": "Amount of \"Submitted\" statuses among the latest form answer statuses from all forms currently attached to the session",
            "format": "int32"
          },
          "NoAction": {
            "type": "integer",
            "description": "Amount of \"No Action\" statuses among the latest form answer statuses from all forms currently attached to the session",
            "format": "int32"
          },
          "NameDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionNamingConventionAnswerModel"
            },
            "description": "Json which represents SessionTitle created via Session Naming Convention and is comprised of [{\"Question\":\"First question\",\"Answer: \"First answer\"}]",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionFolderViewModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32"
          },
          "UserId": {
            "type": "integer",
            "description": "Unique id of the user within the system",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of session folder",
            "nullable": true
          },
          "ParentId": {
            "type": "integer",
            "description": "Unique id of parent session folder within the system",
            "format": "int32",
            "nullable": true
          },
          "DocumentId": {
            "type": "integer",
            "description": "Unique id of document within the system",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateSessionFolderModel": {
        "required": [
          "ContentId",
          "Name"
        ],
        "type": "object",
        "properties": {
          "ContentId": {
            "type": "integer",
            "description": "Unique id of the session within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 400,
            "type": "string",
            "description": "The name of created folder"
          },
          "ParentId": {
            "type": "integer",
            "description": "Unique id of parent session folder within the system",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RenameSessionFolderModel": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique id of the session folder within the system",
            "format": "int32"
          },
          "Name": {
            "maxLength": 400,
            "type": "string",
            "description": "New name of session folder"
          }
        },
        "additionalProperties": false
      },
      "JwtToken": {
        "required": [
          "access_token",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "maxLength": 1024,
            "type": "string",
            "description": "Access token for the application"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token lifetime in seconds",
            "format": "int64"
          },
          "token_type": {
            "maxLength": 24,
            "type": "string",
            "description": "Type of created token"
          },
          "content_id": {
            "type": "integer",
            "description": "Session id, if token created for concrete session",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestJwtToken": {
        "required": [
          "access_token",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "ExternalAccessToken": {
            "maxLength": 1024,
            "type": "string",
            "description": "Access token of user in Nest system",
            "nullable": true
          },
          "extended_rights": {
            "maxLength": 5,
            "minLength": 4,
            "pattern": "True|False",
            "type": "string",
            "description": "Indicates if the Nest user has extended rights",
            "nullable": true
          },
          "access_token": {
            "maxLength": 1024,
            "type": "string",
            "description": "Access token for the application"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token lifetime in seconds",
            "format": "int64"
          },
          "token_type": {
            "maxLength": 24,
            "type": "string",
            "description": "Type of created token"
          },
          "content_id": {
            "type": "integer",
            "description": "Session id, if token created for concrete session",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}